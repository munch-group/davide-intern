[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Genetic Signature of meiotic drive",
    "section": "",
    "text": "Project\nThese pages are generated from a Git repository I made for you. Read more about Git and repositories in the project guide. The repository, with its files and folders, serves as a scaffold for your project, with placeholder files to get you started.\nDuring the project, you will populate it with your code, analysis notebooks, and documentation reporting your work and use Git to track this development. This way your project will end up documented by a set of pages like these.",
    "crumbs": [
      "Project"
    ]
  },
  {
    "objectID": "index.html#outline",
    "href": "index.html#outline",
    "title": "The Genetic Signature of meiotic drive",
    "section": "Outline",
    "text": "Outline\nIt will help if you write a paragraph here outlining the project to the extent you can. What are the goals of your project? What would you like to find out? What would you like to learn? You should update it along the way.",
    "crumbs": [
      "Project"
    ]
  },
  {
    "objectID": "index.html#suggested-reading",
    "href": "index.html#suggested-reading",
    "title": "The Genetic Signature of meiotic drive",
    "section": "Suggested reading",
    "text": "Suggested reading\nIf you need a basic introduction to population genetics, I suggest reading “An introduction to population genetics: Theory and applications” by Rasmus Nielsen and Monty Slatkin (Nielsen and Slatkin 2016). A free alternative is Graham Coop’s Lecture notes, which offer a similar introduction.\n\nI will guide you to additional material once you get started.",
    "crumbs": [
      "Project"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "The Genetic Signature of meiotic drive",
    "section": "Schedule",
    "text": "Schedule\nOnce you get started, you should make a plan for your project. It will change along the way, but with a plan, you will know when it does.\nYou should outline the project plan and what you intend to do in the weeks/months of your project. Such a plan is tentative and will change along the way when you find such changes are meaningful or necessary.\nAn excellent way to do this is to use the GitHub Project feature on our group GitHub account.\n\n\n\n\nNielsen, Rasmgb, and Montgomery Slatkin. 2016. An Introduction to Population Genetics: Theory and Applications.",
    "crumbs": [
      "Project"
    ]
  },
  {
    "objectID": "notebooks/01_tsanalysis.html",
    "href": "notebooks/01_tsanalysis.html",
    "title": "Simulate an ancestral history for 3 diploid samples under the coalescent",
    "section": "",
    "text": "Analyzing treesequence output from SLiM\n\nimport msprime, tskit, pyslim, time \nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n\nts1 =  tskit.load(\"../data/out.trees\")\n\n\ndef TajimasD(ts_list, windows_len=1800):   \n    if type(ts_list) == tskit.trees.TreeSequence:\n        L = int(ts_list.sequence_length)\n        windows = np.linspace(0, L, L//windows_len)\n        plt.stairs(ts_list.Tajimas_D(windows=windows), windows/1_000, baseline=None)  # Default is mode=\"site\"\n        plt.title(\"Tajima's D\")\n        plt.xlabel(\"Genome position (kb)\")\n        plt.ylabel(\"D\")\n        plt.show()\n    elif type(ts_list) == list:\n        for ts in ts_list:\n            L = int(ts.sequence_length)\n            windows = np.linspace(0, L, L//windows_len)\n            plt.stairs(ts.Tajimas_D(windows=windows), windows/1_000, baseline=None)\n        plt.xlabel(\"Genome position (kb)\")\n        plt.ylabel(\"D\")\n        plt.show()\n    return 0 \n\ndef Tmrca(ts_list):\n    #Plotting TMRCA for given tree sequence \n    if type(ts_list) == tskit.trees.TreeSequence:      \n        #filtering trees with more than one branch \n        trees_onebranch = [tree for tree in ts_list.trees() if len(tree.roots) == 1]\n        tmrca = np.zeros(len(trees_onebranch)) #initializing lists\n        breakpoints = np.zeros(len(trees_onebranch))\n        for tree in ts_list.trees():\n            if len(tree.roots) == 1:\n                tmrca[tree.index] = tree.time(tree.root)\n                breakpoints[tree.index] = tree.interval[0]     #t[0] + (t[1] + t[0] / 2)\n            plt.plot(breakpoints / 1000, tmrca, \"o\")\n        plt.ylabel(\"T_mrca (Generations)\")\n        plt.xlabel(\"Position (kb)\")\n        plt.show()\n    elif type(ts_list) == list:\n        for ts in ts_list:\n            trees_onebranch = [tree for tree in ts.trees() if len(tree.roots) == 1]\n            tmrca = np.zeros(len(trees_onebranch)) #initializing lists\n            breakpoints = np.zeros(len(trees_onebranch))\n            for tree in ts.trees():\n                if len(tree.roots) == 1:\n                    tmrca[tree.index] = tree.time(tree.root)\n                    breakpoints[tree.index] = tree.interval[0]\n                    #t[0] + (t[1] + t[0] / 2)\n            plt.plot(breakpoints / 1000, tmrca, \"o\")\n        plt.ylabel(\"T_mrca (Generations)\")\n        plt.xlabel(\"Position (kb)\")\n        plt.show()\n    return 0\n\n\ndef ts_visualizer(ts_list, startpos, endpos):\n    \n    Tmrca(ts_list)\n    \n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 3))\n    \"\"\" for ts in ts_list:\n        L = int(ts.sequence_length)\n        windows = np.linspace(0, L, num=L//500)\n        ax1.stairs(ts.diversity(windows=windows), windows/1_000, baseline=None)  # Default is mode=\"site\"\n        ax1.set_title(\"Site-based calculation\")\n        #ax1.set_xlim(4e3, 6e3)\n        ax1.set_yscale(\"log\")\n        #ax1.set_ylim(1e-6, 1e-2)\n        ax2.stairs(ts.diversity(windows=windows, mode=\"branch\"), windows/1_000, baseline=None)\n        #ax2.set_xlim(4e3, 6e3)\n        ax2.set_yscale(\"log\")\n        ax1.set_ylabel(\"Diversity\")\n        ax1.set_xlabel(\"Genome position (kb)\")\n        ax2.set_xlabel(\"Genome position (kb)\")\n        ax2.set_title(\"Branch-length-based calculation\")\n    plt.show() \"\"\"\n\n    fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(12, 3))\n    \"\"\" for ts in ts_list:\n        afs1 = ts.allele_frequency_spectrum(polarised=True, mode=\"branch\")\n        ax1.bar(np.arange(ts.num_samples+1), afs1)\n        ax1.set_title(\"Genome-wide branch-length AFS\")\n        restricted_ts = ts.keep_intervals([[startpos, endpos]])\n        afs2 = restricted_ts.allele_frequency_spectrum(polarised=True, mode=\"branch\")\n        ax2.bar(np.arange(restricted_ts.num_samples+1), afs2)\n        ax2.set_title(f\"Branch-length AFS between {startpos} and {endpos}\")\n    plt.show()\n\n    TajimasD(ts_list) \"\"\"\n    '''\n        afs = ts.allele_frequency_spectrum()\n        plt.bar(np.arange(ts.num_samples + 1), afs)\n        plt.title(\"Unpolarised allele frequency spectrum\")\n        plt.show()\n\n    '''\n    return 0\n\n\nimport msprime\nfrom IPython.display import SVG, display\n\n# with recombination on a 5kb region with human-like parameters.\nts1 = msprime.sim_ancestry(\nsamples=3,\nrecombination_rate=1e-8,\nsequence_length=5_000,\npopulation_size=10_000,\nrandom_seed=123456)\n# Visualise the simulated ancestral history.\nSVG(ts1.draw_svg())\n\n\n\n\n\n\n\n\n\nn_windows = 5\nts2.Tajimas_D(windows=np.linspace(0, ts2.sequence_length, n_windows + 1))\n\n\nts_visualizer(ts1, 0, 1000)\n\n\n\n\n\n\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef ts_analyzer(ts_list):\n    pass\n\n\nswept_tree = ts.at(10_000)  # or you can get e.g. the nth tree using ts.at_index(n)\nintvl = swept_tree.interval\nprint(f\"Tree number {swept_tree.index}, which runs from position {intvl.left} to {intvl.right}:\")\n# Draw it at a wide size, to make room for all 40 tips\nswept_tree.draw_svg(size=(1000, 200))\n\nTree number 1, which runs from position 10000.0 to 10001.0:\n\n\n\n\n\n\n\n\n\n\nreduced_ts = ts.simplify([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])  # simplify to the first 10 samples\nprint(\"Genealogy of the first 10 samples for the first 5kb of the genome\")\nreduced_ts.draw_svg(x_lim=(0, 5000))\n\nGenealogy of the first 10 samples for the first 5kb of the genome\n\n\n\n\n\n\n\n\n\n\nd = ts.diversity()\nprint(f\"Average diversity per unit sequence length = {d:.3G}\")\n\nAverage diversity per unit sequence length = 0.000345\n\n\n\nwindows = np.linspace(0, ts.sequence_length, num=5)\nd = ts.diversity(windows=windows)\nprint(windows, d, sep=\"\\n\")\n\n[    0.  7502. 15004. 22506. 30008.]\n[0.         0.         0.00032951 0.00105048]",
    "crumbs": [
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>01_tsanalysis.html</span>"
    ]
  },
  {
    "objectID": "reports/manuscript.html",
    "href": "reports/manuscript.html",
    "title": "Manuscript",
    "section": "",
    "text": "Abstract\nThis is my report about Denmark… blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Manuscript</span>"
    ]
  },
  {
    "objectID": "reports/manuscript.html#introduction",
    "href": "reports/manuscript.html#introduction",
    "title": "Manuscript",
    "section": "Introduction",
    "text": "Introduction\nDenmark is …. blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Manuscript</span>"
    ]
  },
  {
    "objectID": "reports/manuscript.html#results",
    "href": "reports/manuscript.html#results",
    "title": "Manuscript",
    "section": "Results",
    "text": "Results\n\nWeather\nAs shown in Figure 2.1, the Danish weather is blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah.\n\n\n\n\n\n\n\n\n\nFigure 2.1: Danish weather: This is the weather forcast for your project\n\n\n\n\n\n\n\n\nSocial norms\nIn Denmark, the workplace interaction is very informal and largely unaffected by seniority and age.\n\n\n\nI sampled 100 danaes from workplaces in Denmark. More about the sampling… blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah,\n\n\n\nI found that neither academic seniority or age of workplace individuals much affected how informal our interaction was (see Figure 2.2).\n\n\n\n\n\n\n\n\n\nFigure 2.2: Interaction among Danes: How Danes interact is has very little to do with age and seniority, compared to most other contries.\n\n\n\n\n\n\n\n\n\n\nThe correlation between informality and age was 0.035 and the correlation between informality and seniority was 0.122.",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Manuscript</span>"
    ]
  },
  {
    "objectID": "reports/manuscript.html#discussion",
    "href": "reports/manuscript.html#discussion",
    "title": "Manuscript",
    "section": "Discussion",
    "text": "Discussion\nThis this investigation of Danes…, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah.",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Manuscript</span>"
    ]
  },
  {
    "objectID": "reports/manuscript.html#methods",
    "href": "reports/manuscript.html#methods",
    "title": "Manuscript",
    "section": "Methods",
    "text": "Methods\n\nWeather analysis\n\n\n\nWeather data was collected… blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah\n\n\n\n\n\nInteraction analysis\n\n\n\nWorkplace individuals were interviewed by …. blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah,",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Manuscript</span>"
    ]
  },
  {
    "objectID": "reports/supplementary.html",
    "href": "reports/supplementary.html",
    "title": "Supplementary info",
    "section": "",
    "text": "Regression analysis of formality\nBlah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah, blah.",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supplementary info</span>"
    ]
  },
  {
    "objectID": "reports/supplementary.html#regression-analysis-of-formality",
    "href": "reports/supplementary.html#regression-analysis-of-formality",
    "title": "Supplementary info",
    "section": "",
    "text": "Figure 3.1: Interaction among Danes: Regressions of informality against age for five levels of seniority.",
    "crumbs": [
      "Reports",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Supplementary info</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Nielsen, Rasmgb, and Montgomery Slatkin. 2016. An Introduction to\nPopulation Genetics: Theory and Applications.",
    "crumbs": [
      "References"
    ]
  }
]